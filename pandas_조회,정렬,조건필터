from IPython.display import Image
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset("titanic")
df.head()
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
0	0	3	male	22.0	1	0	7.2500	S	Third	man	True	NaN	Southampton	no	False
1	1	1	female	38.0	1	0	71.2833	C	First	woman	False	C	Cherbourg	yes	False
2	1	3	female	26.0	0	0	7.9250	S	Third	woman	False	NaN	Southampton	yes	True
3	1	1	female	35.0	1	0	53.1000	S	First	woman	False	C	Southampton	yes	False
4	0	3	male	35.0	0	0	8.0500	S	Third	man	True	NaN	Southampton	no	True

컬럼 (column) 설명
survivied: 생존여부 (1: 생존, 0: 사망)
pclass: 좌석 등급 (1등급, 2등급, 3등급)
sex: 성별
age: 나이
sibsp: 형제 + 배우자 수
parch: 부모 + 자녀 수
fare: 좌석 요금
embarked: 탑승 항구 (S, C, Q)
class: pclass와 동일
who: 남자(man), 여자(woman), 아이(child)
adult_male: 성인 남자 여부
deck: 데크 번호 (알파벳 + 숫자 혼용)
embark_town: 탑승 항구 이름
alive: 생존여부 (yes, no)
alone: 혼자 탑승 여부

df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 15 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     891 non-null    int64   
 1   pclass       891 non-null    int64   
 2   sex          891 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        891 non-null    int64   
 5   parch        891 non-null    int64   
 6   fare         891 non-null    float64 
 7   embarked     889 non-null    object  
 8   class        891 non-null    category
 9   who          891 non-null    object  
 10  adult_male   891 non-null    bool    
 11  deck         203 non-null    category
 12  embark_town  889 non-null    object  
 13  alive        891 non-null    object  
 14  alone        891 non-null    bool    
dtypes: bool(2), category(2), float64(2), int64(4), object(5)
memory usage: 80.7+ KB


value_counts()
column 별 값의 분포를 확인할 때 사용합니다.

남자, 여자, 아이의 데이터 분포를 확인하고 싶다면 다음과 같이 실행합니다.

df['who']
0        man
1      woman
2      woman
3      woman
4        man
       ...  
886      man
887    woman
888    woman
889      man
890      man
Name: who, Length: 891, dtype: object

df['who'].value_counts() #개수
man      537
woman    271
child     83
Name: who, dtype: int64

df['who'].value_counts(True) #비율
man      0.602694
woman    0.304153
child    0.093154
Name: who, dtype: float64

df['who'].value_counts()
man      537
woman    271
child     83
Name: who, dtype: int64


속성: Attributes
속성 값은 함수형으로 조회하지 않습니다. (변수처럼 생각하기)

자주 활용하는 DataFrame은 속성 값들은 다음과 같습니다.

ndim
shape
index
columns
values
T

df.ndim
2
(행, 열) 순서로 출력됩니다.

df.shape
(891, 15)
index는 기본 설정된 RangeIndex가 출력됩니다.

df.index
RangeIndex(start=0, stop=891, step=1)
columns는 열을 출력 합니다.

df.columns
Index(['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare',
       'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town',
       'alive', 'alone'],
      dtype='object')
values는 모든 값을 출력하며, numpy array 형식으로 출력됩니다.

df.values
array([[0, 3, 'male', ..., 'Southampton', 'no', False],
       [1, 1, 'female', ..., 'Cherbourg', 'yes', False],
       [1, 3, 'female', ..., 'Southampton', 'yes', True],
       ...,
       [0, 3, 'female', ..., 'Southampton', 'no', False],
       [1, 1, 'male', ..., 'Cherbourg', 'yes', True],
       [0, 3, 'male', ..., 'Queenstown', 'no', True]], dtype=object)
T: 전치 (Transpose) 는 Index와 Column의 축을 교환합니다.

df.T


타입 변환 (astype)

df['pclass'].astype('int32').head()
0    3
1    1
2    3
3    1
4    3
Name: pclass, dtype: int32
float32로 변경

df['pclass'].astype('float32').head()
0    3.0
1    1.0
2    3.0
3    1.0
4    3.0
Name: pclass, dtype: float32
df['pclass'].astype('str').head()
0    3
1    1
2    3
3    1
4    3
Name: pclass, dtype: object
object로 변경

df['pclass'].astype('str').head()
category로 변경.

category로 변경시에는 Categories가 같이 출력 됩니다.

df['pclass'].astype('category').head()
0    3
1    1
2    3
3    1
4    3
Name: pclass, dtype: category
Categories (3, int64): [1, 2, 3]

정렬 (sort)
sort_index: index 정렬
index 기준으로 정렬합니다. (기본 오름차순이 적용되어 있습니다.
내림차순 정렬을 적용하려면, ascending=False를 옵션 값으로 설정합니다.
df.sort_index().head(5)
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
0	0	3	male	22.0	1	0	7.2500	S	Third	man	True	NaN	Southampton	no	False
1	1	1	female	38.0	1	0	71.2833	C	First	woman	False	C	Cherbourg	yes	False
2	1	3	female	26.0	0	0	7.9250	S	Third	woman	False	NaN	Southampton	yes	True
3	1	1	female	35.0	1	0	53.1000	S	First	woman	False	C	Southampton	yes	False
4	0	3	male	35.0	0	0	8.0500	S	Third	man	True	NaN	Southampton	no	True
df.sort_index(ascending=False).head(5)
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
890	0	3	male	32.0	0	0	7.75	Q	Third	man	True	NaN	Queenstown	no	True
889	1	1	male	26.0	0	0	30.00	C	First	man	True	C	Cherbourg	yes	True
888	0	3	female	NaN	1	2	23.45	S	Third	woman	False	NaN	Southampton	no	False
887	1	1	female	19.0	0	0	30.00	S	First	woman	False	B	Southampton	yes	True
886	0	2	male	27.0	0	0	13.00	S	Second	man	True	NaN	Southampton	no	True
sort_values: 값에 대한 정렬
값을 기준으로 행을 정렬합니다.
by에 기준이 되는 행을 설정합니다.
by에 2개 이상의 컬럼을 지정하여 정렬할 수 있습니다.
오름차순/내림차순을 컬럼 별로 지정할 수 있습니다.
df.sort_values(by='age').head() #나이(개월수)를 기준으로 오름차순으로 출력
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
803	1	3	male	0.42	0	1	8.5167	C	Third	child	False	NaN	Cherbourg	yes	False
755	1	2	male	0.67	1	1	14.5000	S	Second	child	False	NaN	Southampton	yes	False
644	1	3	female	0.75	2	1	19.2583	C	Third	child	False	NaN	Cherbourg	yes	False
469	1	3	female	0.75	2	1	19.2583	C	Third	child	False	NaN	Cherbourg	yes	False
78	1	2	male	0.83	0	2	29.0000	S	Second	child	False	NaN	Southampton	yes	False
내림차순 정렬: ascending=False

df.sort_values(by='age', ascending=False).head()
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
630	1	1	male	80.0	0	0	30.0000	S	First	man	True	A	Southampton	yes	True
851	0	3	male	74.0	0	0	7.7750	S	Third	man	True	NaN	Southampton	no	True
493	0	1	male	71.0	0	0	49.5042	C	First	man	True	NaN	Cherbourg	no	True
96	0	1	male	71.0	0	0	34.6542	C	First	man	True	A	Cherbourg	no	True
116	0	3	male	70.5	0	0	7.7500	Q	Third	man	True	NaN	Queenstown	no	True
문자열 컬럼도 오름차순/내림차순 정렬이 가능하며 알파벳 순서로 정렬됩니다.

df.sort_values(by='class', ascending=False).head() #F, S, T 알파벳순
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
0	0	3	male	22.0	1	0	7.2500	S	Third	man	True	NaN	Southampton	no	False
511	0	3	male	NaN	0	0	8.0500	S	Third	man	True	NaN	Southampton	no	True
500	0	3	male	17.0	0	0	8.6625	S	Third	man	True	NaN	Southampton	no	True
501	0	3	female	21.0	0	0	7.7500	Q	Third	woman	False	NaN	Queenstown	no	True
502	0	3	female	NaN	0	0	7.6292	Q	Third	woman	False	NaN	Queenstown	no	True
2개 이상의 컬럼을 기준으로 값 정렬 할 수 있습니다.

df.sort_values(by=['fare', 'age']).head()
#먼저 fare를 기준으로 정렬, 동률이 나왔을 경우 age를 기준으로 정렬
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
302	0	3	male	19.0	0	0	0.0	S	Third	man	True	NaN	Southampton	no	True
271	1	3	male	25.0	0	0	0.0	S	Third	man	True	NaN	Southampton	yes	True
179	0	3	male	36.0	0	0	0.0	S	Third	man	True	NaN	Southampton	no	True
822	0	1	male	38.0	0	0	0.0	S	First	man	True	NaN	Southampton	no	True
806	0	1	male	39.0	0	0	0.0	S	First	man	True	A	Southampton	no	True
오름차순/내림차순 정렬도 컬럼 각각에 지정해 줄 수 있습니다.

df.sort_values(by=['fare', 'age'], ascending=[False, True]).head()
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
258	1	1	female	35.0	0	0	512.3292	C	First	woman	False	NaN	Cherbourg	yes	True
737	1	1	male	35.0	0	0	512.3292	C	First	man	True	B	Cherbourg	yes	True
679	1	1	male	36.0	0	1	512.3292	C	First	man	True	B	Cherbourg	yes	False
27	0	1	male	19.0	3	2	263.0000	S	First	man	True	C	Southampton	no	False
88	1	1	female	23.0	3	2	263.0000	S	First	woman	False	C	Southampton	yes	False



Indexing, Slicing, 조건 필터링

loc - indexing / slicing
indexing과 slicing을 할 수 있습니다.
slicing은 [시작(포함): 끝(포함)] 규칙에 유의합니다. 둘 다 포함 합니다.
indexing 예시

df.loc[5, 'class'] #[행,열] 가져오기
'Third'
fancy indexing 예시

df.loc[2:5, ['age', 'fare', 'who']]
age	fare	who
2	26.0	7.9250	woman
3	35.0	53.1000	woman
4	35.0	8.0500	man
5	NaN	8.4583	man
slicing 예시

df.head(2)
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
0	0	3	male	22.0	1	0	7.2500	S	Third	man	True	NaN	Southampton	no	False
1	1	1	female	38.0	1	0	71.2833	C	First	woman	False	C	Cherbourg	yes	False
df.loc[2:5, 'class':'deck'].head()
class	who	adult_male	deck
2	Third	woman	False	NaN
3	First	woman	False	C
4	Third	man	True	NaN
5	Third	man	True	NaN
df.loc[:6, 'class':'deck']
class	who	adult_male	deck
0	Third	man	True	NaN
1	First	woman	False	C
2	Third	woman	False	NaN
3	First	woman	False	C
4	Third	man	True	NaN
5	Third	man	True	NaN
6	First	man	True	E

loc - 조건 필터
boolean index을 만들어 조건에 맞는 데이터만 추출해 낼 수 있습니다.

cond = (df['age'] >= 70) #조건 Series
cond
0      False
1      False
2      False
3      False
4      False
       ...  
886    False
887    False
888    False
889    False
890    False
Name: age, Length: 891, dtype: bool
df.loc[cond]
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
96	0	1	male	71.0	0	0	34.6542	C	First	man	True	A	Cherbourg	no	True
116	0	3	male	70.5	0	0	7.7500	Q	Third	man	True	NaN	Queenstown	no	True
493	0	1	male	71.0	0	0	49.5042	C	First	man	True	NaN	Cherbourg	no	True
630	1	1	male	80.0	0	0	30.0000	S	First	man	True	A	Southampton	yes	True
672	0	2	male	70.0	0	0	10.5000	S	Second	man	True	NaN	Southampton	no	True
745	0	1	male	70.0	1	1	71.0000	S	First	man	True	B	Southampton	no	False
851	0	3	male	74.0	0	0	7.7750	S	Third	man	True	NaN	Southampton	no	True
loc - 다중 조건
다중 조건은 먼저 condition을 정의하고 & 와 | 연산자로 복합 조건을 생성합니다.

# 조건1 정의
cond1 = (df['fare'] > 30)

# 조건2 정의
cond2 = (df['who'] == 'woman')
df.loc[cond1 & cond2]
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
1	1	1	female	38.0	1	0	71.2833	C	First	woman	False	C	Cherbourg	yes	False
3	1	1	female	35.0	1	0	53.1000	S	First	woman	False	C	Southampton	yes	False
25	1	3	female	38.0	1	5	31.3875	S	Third	woman	False	NaN	Southampton	yes	False
31	1	1	female	NaN	1	0	146.5208	C	First	woman	False	B	Cherbourg	yes	False
52	1	1	female	49.0	1	0	76.7292	C	First	woman	False	D	Cherbourg	yes	False
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
853	1	1	female	16.0	0	1	39.4000	S	First	woman	False	D	Southampton	yes	False
856	1	1	female	45.0	1	1	164.8667	S	First	woman	False	NaN	Southampton	yes	False
863	0	3	female	NaN	8	2	69.5500	S	Third	woman	False	NaN	Southampton	no	False
871	1	1	female	47.0	1	1	52.5542	S	First	woman	False	D	Southampton	yes	False
879	1	1	female	56.0	0	1	83.1583	C	First	woman	False	C	Cherbourg	yes	False
100 rows × 15 columns

df.loc[cond1 | cond2]
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
1	1	1	female	38.0	1	0	71.2833	C	First	woman	False	C	Cherbourg	yes	False
2	1	3	female	26.0	0	0	7.9250	S	Third	woman	False	NaN	Southampton	yes	True
3	1	1	female	35.0	1	0	53.1000	S	First	woman	False	C	Southampton	yes	False
6	0	1	male	54.0	0	0	51.8625	S	First	man	True	E	Southampton	no	True
8	1	3	female	27.0	0	2	11.1333	S	Third	woman	False	NaN	Southampton	yes	False
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
880	1	2	female	25.0	0	1	26.0000	S	Second	woman	False	NaN	Southampton	yes	False
882	0	3	female	22.0	0	0	10.5167	S	Third	woman	False	NaN	Southampton	no	True
885	0	3	female	39.0	0	5	29.1250	Q	Third	woman	False	NaN	Queenstown	no	False
887	1	1	female	19.0	0	0	30.0000	S	First	woman	False	B	Southampton	yes	True
888	0	3	female	NaN	1	2	23.4500	S	Third	woman	False	NaN	Southampton	no	False
405 rows × 15 columns

조건 필터 후 데이터 대입

cond = (df['age'] >= 70)
cond
0      False
1      False
2      False
3      False
4      False
       ...  
886    False
887    False
888    False
889    False
890    False
Name: age, Length: 891, dtype: bool
# 조건 필터
df.loc[cond]
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
96	0	1	male	71.0	0	0	34.6542	C	First	man	True	A	Cherbourg	no	True
116	0	3	male	70.5	0	0	7.7500	Q	Third	man	True	NaN	Queenstown	no	True
493	0	1	male	71.0	0	0	49.5042	C	First	man	True	NaN	Cherbourg	no	True
630	1	1	male	80.0	0	0	30.0000	S	First	man	True	A	Southampton	yes	True
672	0	2	male	70.0	0	0	10.5000	S	Second	man	True	NaN	Southampton	no	True
745	0	1	male	70.0	1	1	71.0000	S	First	man	True	B	Southampton	no	False
851	0	3	male	74.0	0	0	7.7750	S	Third	man	True	NaN	Southampton	no	True
나이 컬럼만 가져옵니다.

df.loc[cond, 'age']
96     71.0
116    70.5
493    71.0
630    80.0
672    70.0
745    70.0
851    74.0
Name: age, dtype: float64
조건 필터 후 원하는 값을 대입할 수 있습니다. (단일 컬럼 선택에 유의)

df.loc[cond, 'age'] = -1
df.loc[cond]
survived	pclass	sex	age	sibsp	parch	fare	embarked	class	who	adult_male	deck	embark_town	alive	alone
96	0	1	male	-1.0	0	0	34.6542	C	First	man	True	A	Cherbourg	no	True
116	0	3	male	-1.0	0	0	7.7500	Q	Third	man	True	NaN	Queenstown	no	True
493	0	1	male	-1.0	0	0	49.5042	C	First	man	True	NaN	Cherbourg	no	True
630	1	1	male	-1.0	0	0	30.0000	S	First	man	True	A	Southampton	yes	True
672	0	2	male	-1.0	0	0	10.5000	S	Second	man	True	NaN	Southampton	no	True
745	0	1	male	-1.0	1	1	71.0000	S	First	man	True	B	Southampton	no	False
851	0	3	male	-1.0	0	0	7.7750	S	Third	man	True	NaN	Southampton	no	True

--------------------------
나이가 30살 이상 남자 승객 조건 필터링
fare를 많이 낸 순서로 내림차순 정렬
상위 10개를 출력

cond1 = ( df['age']>=30 )
cond2 = ( df['sex'] == 'male' )
df.loc[cond1 & cond2].sort_values('fare', ascending=False).head(10)
#혹은
#a = df.loc[cond1 & cond2]
#a.sort_values('fare', ascending = False).head(10)
---------------------------

isin
특정 값의 포함 여부는 isin 함수를 통해 비교가 가능합니다. (파이썬의 in 키워드는 사용 불가 합니다.)

sample = pd.DataFrame({'name': ['kim', 'lee', 'park', 'choi'], 
                        'age': [24, 27, 34, 19]
                      })
sample
name	age
0	kim	24
1	lee	27
2	park	34
3	choi	19
sample['name'].isin(['kim', 'lee'])
0     True
1     True
2    False
3    False
Name: name, dtype: bool
sample.isin(['kim', 'lee']) #오류
name	age
0	True	False
1	True	False
2	False	False
3	False	False


-----------------------
tips 데이터셋 중 day가 금요일(Fri), 토요일(Sat) 만 필터링 합니다.
tip이 $10보다 적게 낸 데이터만 필터링합니다.
컬럼은 total_bill, tip, smoker, time만 출력합니다.
상위 10개 행만 출력합니다.

cond1 = tips['day'].isin(['Fri', 'Sat'])
cond2 = (tips['tip'] < 10)
tips.loc[cond1 & cond2, ['total_bill', 'tip', 'smoker', 'time']].head(10)
total_bill	tip	smoker	time
19	20.65	3.35	No	Dinner
20	17.92	4.08	No	Dinner
21	20.29	2.75	No	Dinner
22	15.77	2.23	No	Dinner
23	39.42	7.58	No	Dinner
24	19.82	3.18	No	Dinner
25	17.81	2.34	No	Dinner
26	13.37	2.00	No	Dinner
27	12.69	2.00	No	Dinner
28	21.70	4.30	No	Dinner
